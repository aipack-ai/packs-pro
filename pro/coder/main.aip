# Before All

Here we do the prep work in the "Before All" section in case we need to set `split_file_into_inputs = true`.

This will return inputs, where each input will have `.context_files: string[]`. This way, the input run can operate on multiple files or just get one file in the array (or eventually more than one).

```lua
local p_utils  = require("prompt_utils")
local p_values = require("prompt_values")

-- == Check AIPACK Version
if not aip.semver.compare(CTX.AIPACK_VERSION, ">", "0.6.11") then
    local msg = "\nWARNING - This pack requires AIPACK_VERSION 0.6.12 or above, but " .. CTX.AIPACK_VERSION .. " is currently installed"
    msg = msg .. "\n\nACTION  - Update your aipack `cargo install aipack` (to check your aipack version run 'aip -V')"
    print(msg)
    return aip.flow.skip("Wrong aipack version")
end

-- == Init the prompt file if needed
local prompt_absolute_dir  = CTX.WORKSPACE_AIPACK_DIR .. "/.prompt/" .. CTX.PACK_IDENTITY
local prompt_file_path     = prompt_absolute_dir .. "/coder-prompt.md"

local input = inputs and inputs[1] or nil

local prompt_file = p_utils.prep_prompt_file(input, {
    default_prompt_path = prompt_file_path,
    initial_content     = p_values.prompt_template
})
local prompt_file_rel_path = aip.path.diff(prompt_file.path, CTX.WORKSPACE_DIR)

-- == Extract data from prompt files
-- Split the prompt into inst and content
local first_part, second_part = p_utils.prep_inst_and_content(prompt_file.content, "====", {content_is_default = false})

-- Clean the second_part
if second_part ~= nil then
    second_part = aip.text.trim(second_part)
    -- now remove the first line block with ">"
    local _note_blocks, remain = aip.text.extract_line_blocks(second_part, {starts_with = ">", extrude = "content", first = 1})
    second_part = aip.text.trim(remain)
    if #second_part == 0 then
        second_part = nil
    end
end

-- Note: For now, we ignore the second part, as this will display what the AI says beside the code it gives. This allows for explanations, but there is no need to put it back in context.

-- == Extract the meta and instruction
local meta, inst = aip.md.extract_meta(first_part)
-- Remove the `> ..` lines
local _line_blocks, inst_content = aip.text.extract_line_blocks(inst,
                                             {starts_with = ">", extrude = "content"})
inst = aip.text.trim(inst_content)

-- == Determine if we should skip
if inst == "" then
    local msg = "Empty instruction. Open & Edit prompt file:\n\n"
    msg = msg .. "➜ " .. prompt_file_rel_path .. "    (And press [r] for Replay)"
    return aipack.skip(msg)
end

-- == Prep the cache files
local prompt_files_path            = prompt_file.dir .. "/" .. ".cache/prompt_files_path.md"
aip.file.save(prompt_files_path, "")
local ai_responses_for_raw_path    = prompt_file.dir .. "/" .. ".cache/last_ai_responses_for_raw.md"
aip.file.save(ai_responses_for_raw_path, "")
local ai_responses_for_prompt_path = prompt_file.dir .. "/" .. ".cache/last_ai_responses_for_prompt.md"
aip.file.save(ai_responses_for_prompt_path, "")

-- == Prep knowledge_refs
local knowledge_refs = nil
if p_utils.is_not_empty(meta.knowledge_globs) then
    knowledge_refs = aip.file.list(meta.knowledge_globs, {base_dir = CTX.WORKSPACE_DIR})
    print("INFO: Knowledge Files (from knowledge_globs): " .. #knowledge_refs)
end


-- == Prep context_refs and working_refs
local base_dir = meta.base_dir

local context_refs = nil
local structure_refs = nil
local working_refs = nil
local working_concurrency = meta.working_concurrency or false


if base_dir ~= nil then
    -- Remove the trailing /
    base_dir =  base_dir:gsub("/+$", "")

    -- Prep structure_globs = "**/*.*"
    local structure_globs = nil
    if p_utils.is_not_empty(meta.structure_globs)  then
        structure_refs = aip.file.list(meta.structure_globs, {base_dir = base_dir})
    end

    context_refs = {} -- probably need to be nil to be consistent
    if p_utils.is_not_empty(meta.context_globs)  then
        context_refs = aip.file.list(meta.context_globs, {base_dir = base_dir})
    end

    -- Prep working_refs
    if p_utils.is_not_empty(meta.working_globs) then
        working_refs = aip.file.list(meta.working_globs, {base_dir = base_dir})
    end
else
    print("INFO: No base_dir, update in place.")
end

local write_mode = meta.write_mode or false

-- == Compute include_second_partby default we include second part if not nil
local include_second_part = second_part ~= nil
if write_mode == true then
    -- if write_mode, we do not include second part
    include_second_part = false
end

-- == More logic
print("Prompt file ➜ " .. prompt_file_rel_path)

local should_cache_context_files = false
if working_refs ~= nil then
    should_cache_context_files = true
end

-- == Compute file_content_mode
-- user_file_conent_mode = "whole" or user_file_conent_mode = "search_replace_auto"
local file_content_mode = {}

local user_file_conent_mode = meta.file_content_mode
if user_file_conent_mode then
  if user_file_conent_mode == "whole" then
    file_content_mode.whole = true
  elseif user_file_conent_mode == "search_replace_auto" then
    file_content_mode.search_replace_auto = true
  else
    return aip.flow.skip("Error file_conent_mode value '" .. user_file_conent_mode .. "' is invalid.\nCan be 'whole' or 'search_replace_auto'" )
  end 
else
  -- Default: search_replace_auto
  file_content_mode.search_replace_auto = true
end

-- == Build the inputs(for now, only one)
local input_base = {
    write_mode                   = write_mode,
    file_content_mode            = file_content_mode,
    prompt_file_rel_path         = prompt_file_rel_path,
    default_language             = meta.default_language or "Python",
    knowledge_refs               = knowledge_refs,
    prompt_template              = p_values.prompt_template,
    first_part                   = first_part,
    include_second_part          = include_second_part,
    second_part                  = second_part,
    prompt_path                  = prompt_file.path,
    inst                         = inst,
    knowledge_refs               = knowledge_refs,
    base_dir                     = base_dir,
    structure_refs               = structure_refs,
    context_refs                 = context_refs,
    should_cache_context_files   = should_cache_context_files,
    prompt_files_path            = prompt_files_path,
    ai_responses_for_raw_path    = ai_responses_for_raw_path,
    ai_responses_for_prompt_path = ai_responses_for_prompt_path
}

local inputs = {}

-- If we have working_refs, then, we split input per working_refs (i.e., files)
if working_refs ~= nil and #working_refs > 0 then
    -- NOTE we filter out the working_refs from context_refs
    local working_set = {}
    for _, ref in ipairs(working_refs) do
        working_set[ref.path] = true
    end
    -- Filter context_refs
    local new_context_refs = {}
    for _, ref in ipairs(input_base.context_refs) do
        if not working_set[ref.path] then
            table.insert(new_context_refs, ref)
        end
    end
    input_base.context_refs = new_context_refs

    -- We reshape the inputs if needed
    if working_concurrency then
        for _, working_ref in ipairs(working_refs) do
            -- Note: We put the working_file into an array for later, to allow having one input to be multiple files
            local _display = "working file: " .. working_ref.path .. "\n" .. inst
            table.insert(inputs, {base = input_base, working_refs = {working_ref}, _display = _display})
        end
    else
        inputs = { {base = input_base, working_refs = working_refs, _display = inst} }
    end
-- Otherwise, if no working_refs, then, one input with the input_base
else
    inputs = { {base = input_base, _display = inst} }
end

-- Print Run Info
local context_file_count   = input_base.context_refs and #input_base.context_refs or 0
context_file_count = tostring(context_file_count) -- string.format("%-" .. 5 .. "s", context_file_count)
local write_mode_fmt = tostring(write_mode)
local working_file_count   = working_refs and #working_refs or 0
local knowledge_file_count = input_base.knowledge_refs and #input_base.knowledge_refs or 0
local concurrency_fmt    = "1"
if meta.input_concurrency ~= nil and  meta.input_concurrency > 1 and working_concurrency == false then
    concurrency_fmt = concurrency_fmt .. " (working_concurrency = false)"
elseif working_concurrency == true and meta.input_concurrency ~= nil and meta.input_concurrency > 1 then
    concurrency_fmt = tostring(meta.input_concurrency)
end
concurrency_fmt = tostring(concurrency_fmt)

local run_info = "Context Files: " .. context_file_count .. " | Working Files: " .. working_file_count .. " | Knowledge Files: " .. knowledge_file_count
run_info     =  run_info .. "\n(Write Mode: " .. write_mode_fmt .. ", Concurrency: " .. concurrency_fmt .. ")"
print(run_info)


-- == Compute the agent options
options.model             = meta.model
options.temperature       = meta.temperature
options.model_aliases     = meta.model_aliases
options.input_concurrency = meta.input_concurrency

-- NOTE: for now, it is just one input, but the goal is to allow multiple inputs
return aip.flow.before_all_response({
    inputs  = inputs,
    options = options
})

```

# Data

```lua
local p_utils  = require("prompt_utils")

-- This is the input format (.base, and the .working_refs)
local base, working_refs = input.base, input.working_refs

-- Save the prompt_files_path
local prompt_files_content = "====\n\n"
prompt_files_content = prompt_files_content .. "# Knowledge Files" .. "\n\n" .. p_utils.file_refs_to_md(base.knowledge_refs) .. "\n\n"
prompt_files_content = prompt_files_content .. "# Struture Files" .. "\n\n" .. p_utils.file_refs_to_md(base.structure_refs, "(Only file paths, not their content)") .. "\n\n"
prompt_files_content = prompt_files_content .. "# Context Files" .. "\n\n" .. p_utils.file_refs_to_md(base.context_refs) .. "\n\n"
prompt_files_content = prompt_files_content .. "# Working Files" .. "\n\n" .. p_utils.file_refs_to_md(working_refs) .. "\n\n"
aip.file.append(base.prompt_files_path, prompt_files_content)

-- Augment the base
base.knowledge_files = p_utils.load_file_refs(CTX.WORKSPACE_DIR, base.knowledge_refs)
base.context_files   = p_utils.load_file_refs(base.base_dir, base.context_refs)
base.working_files   = p_utils.load_file_refs(base.base_dir, working_refs)

-- Print info
local knowledge_file_count = tostring(base.knowledge_files and #base.knowledge_files or 0)
local working_file_count = tostring(base.working_files and #base.working_files or 0)
local context_file_count = tostring(base.context_files and #base.context_files or 0)
local task_info = "Context Files: " .. context_file_count .. " | Working Files: " .. working_file_count .. " | Knowledge Files: " .. knowledge_file_count
print(task_info)


-- The augmented base becomes the data.
return base
```

# System `cache = true`

You are a senior developer expert who has deep expertise in many languages and creates production-grade quality code (simple and scalable).

The user instruction will ask you to review/update the existing code or create new code if no existing code is provided.

When the language cannot be inferred from the user or context provided, assume the question is for the {{data.default_language}}` programming language. Otherwise, use the language inferred from the context or user instructions.

When you give bullet points, separate them with empty lines for clarity.

Also, respect the space/tab of the code exactly.

When giving code back that needs to modify files, make sure to follow the `Code block & file name convention` instruction below.

When existing code, do not perform reformatting or make unnecessary changes unless explicitly requested by the user or specified in the user/system knowledge or instructions.

It's very important that all code blocks you provide use four backticks instead of three.

# System `cache = true`

{{#if data.file_content_mode.whole}}

Here are some important Code block and file name convention.

## Code block and file name convention

The files provided will be in a markdown code block, with the appropriate language (file extension) with the first line following this format (with the comment language) `// file: path/to/file.ext`

1.  **Markdown Block Markers for file content:** When providing file content, always enclose it within four backticks in markdown code blocks. Never use three backticks for markdown file content blocks. This ensures compatibility even if the file contains three backticks within its content.
2.  **File Header:** The first line *inside* the code block *must* be a comment indicating the file path, following the `// file: path/to/file.ext` convention.
    - So, for HTML files, it will be `<!-- file: path/to/file.html -->`
    - For SQL, Lua, and other `--` comment languages, it will be `-- file: path/to/file...` (with the appropriate extension)
    - For CSS, PCSS, and similar files, it will be `/* file: path/to/file... */`  (with the appropriate extension)
3.  **Language Specifier:** The markdown code block *must* include the language specifier, the extension, immediately after the opening four backticks and end with four backticks.
4.  **Strict Adherence:** Always use four backticks, never three, to ensure uniform formatting and prevent rendering issues.
5.  **Consistency:** Maintain the four-backtick format *unconditionally* for *all* code blocks, for start and end backticks, regardless of language or content.
6.  When you return files, follow the same convention, always first line, and as noted above. Usually, files will be given this way too.

So, for example, for a javascript file, we would have something like

````js
// file: path/to/file.js
... file content here
````

Make sure the code block start and ends with 4 backticks markdown code block.

{{/if}}

# System `cache = true`

{{#if data.file_content_mode.search_replace_auto}}

When giving a new content of of file, here are some important Code block and file name convention to provide the changes.

## Code block and file name convention

The files provided will be in a markdown code block, with the appropriate language (file extension) with the first line following this format (with the comment language) `// file: path/to/file.ext`

Important, as describe below, you decide if it is better to replace the whole file, or have narrow targeted SEARCH/REPLACE pairs as define below.

1.  **Markdown Block Markers for file content:** When providing file content, always enclose it within four backticks in markdown code blocks. Never use three backticks for markdown file content blocks. This ensures compatibility even if the file contains three backticks within its content.
2.  **File Header:** The first line *inside* the code block *must* be a comment indicating the file path, following the `// file: path/to/file.ext` convention.
    - So, for HTML files, it will be `<!-- file: path/to/file.html -->`
    - For SQL, Lua, and other `--` comment languages, it will be `-- file: path/to/file...` (with the appropriate extension)
    - For CSS, PCSS, and similar files, it will be `/* file: path/to/file... */`  (with the appropriate extension)
3.  **Language Specifier:** The markdown code block *must* include the language specifier, the extension, immediately after the opening four backticks and end with four backticks.
4.  **Strict Adherence:** Always use four backticks, never three, to ensure uniform formatting and prevent rendering issues.
5.  **Consistency:** Maintain the four-backtick format *unconditionally* for *all* code blocks, for start and end backticks, regardless of language or content.
6.  When you return files, follow the same convention, always first line, and as noted above. Usually, files will be given this way too.
7.  Do not remove content if they do not need to be removed. Juse the Search/Replace technique described below to change only what is needed. 

So, for example, for a javascript file, we would have something like

````js
// file: path/to/file.js
file_content_or_search_replace_here
````

Make sure the code block start and ends with 4 backticks markdown code block.

7. **Full File v.s. SEARCH/REPLACE** When creating a new file, put the whole file content in the `file_content_or_search_replace_here` section

8. **SEARCH/REPLACE** When updating an existing file, use the SEARCH/REPLACE format describe below.

9. **SEARCH/REPLACE** When doing search/replace, try to make the search/replace pair are as small as possible to avoid duplicating too much content. 

10. **SEARCH/REPLACE** When doing search/replace, follow SEARCH/REPLACE format describe below precisely.

### SEARCH/REPLACE format

Here is an example of a SEARCH/REPLACE

````js
// file: path/to/file.js
<<<<<<< SEARCH
import * from "process"
=======
import * as pc from "process"
>>>>>>> REPLACE
<<<<<<< SEARCH
function hello_world(name) {
    return `Hello ${name}, welcome to the world`
}
=======
function hello_world(name) {
    return `Hello ${name}, big welcome`
}
>>>>>>> REPLACE
````

Every **SEARCH/REPLACE block** must use this format:

- In a code block, four backticks (i.e. quad backticks) as defined previously
- A code block correspond to one file, meaning if multiple SEARCH/REPLACE needed for a file, put them in the same code block as describe below. 
- First line must be thefile path, like `// file: path/to/file.ext` (use the comment of the language)
- Only use this *SEARCH/REPLACE block* where the whole file does not need to be replaced, but just part of it. Otherwise, just the whole file content as described when a new files. 
- A code block might have one or more SEARCH/REPLACE pairs
- When *SEARCH/REPLACE* is used, try to identify only the ones that need to be replace, not to big chuncks.
- Each SEARCH/REPLACE pair, start with `<<<<<<< SEARCH` (exactually)
- A contiguous chunk of lines to search for in the existing source code (exactly as the source given, preserving whitespace and all)
- The dividing line: `=======` (exactualy)
- The lines to replace into the source code
- The end of the replace block: `>>>>>>> REPLACE`
- Put all of the SEARCH/REPLACE in the same code block for the same file, with no comment or text between.  
- So, do not put You Cannot have other code after a `>>>>>>> REPLACE`, it has to be another SEARCH/REPLACE pair.
- So, a code block has more than one SEARCH/REPLACE section, then, all SEARCH/REPLACE needs to be consecutive. 

Important considerations when generated the *SEARCH/REPLACE* pairs: 

- Keep *SEARCH/REPLACE* pairs concise.
- Break large *SEARCH/REPLACE* blocks into a series of smaller pairs that each change a small portion of the file.
- Include just the changing lines, and a few surrounding lines if needed for uniqueness.
- Do not include long runs of unchanging lines in *SEARCH/REPLACE* blocks.
- To move code within a file, use 2 *SEARCH/REPLACE* blocks: 1 to delete it from its current location, 1 to insert it in the new location.
- Make sure the Search section match exactly, event the whitespace. 

#### EXTREMELY IMPORTANT:

When providing a SEARCH/REPLACE code block, if multiple SEARCH/REPLACE pairs, they MUST be consecutive, they cannot have code in between. 

Something like this would be invalid: 

````js
// file: path/to/file.js
<<<<<<< SEARCH
import * from "process"
=======
import * as pc from "process"
>>>>>>> REPLACE
// Some code or comment <<-- INVALID cannot have code or comment in between search/replace pairs
<<<<<<< SEARCH
function hello_world(name) {
    return `Hello ${name}, welcome to the world`
}
=======
function hello_world(name) {
    return `Hello ${name}, big welcome`
}
>>>>>>> REPLACE
// Some other code or comment <<-- INVALID this is invalid as well, cannot have code/comments/text before or after SEARCH/REPLACE pairs
````



{{/if}}

# System `cache = true`

Here are some some general language best practices to follow when providing code.

## Languages best practices

### Rust

- Mostly assume that there is a `Result<T>` type alias in the module import when doing a `use crate::Result` or whatever the used result is.
- Keep code simple and to the point. Limit allocation when possible, but try to avoid creating types with lifetime when not strictly needed.

### HTML

- Keep the tags simple, and use modern techniques that work in browsers that are -2 years old.
- Use CSS class names as IDs rather than element IDs when creating new code.
    - However, do not change the code unless explicitly asked by the user.

### JavaScript

- Use the web module loading so that we can use modern JavaScript.
- When drawing, try to use Canvas 2D.
- Use standard fetch to retrieve JSON.

### CSS

- Try to use CSS Grid when possible.
- When files are `.pcss`, assume there is a PCSS plugin nested, so that you do not get confused, and keep the nesting appropriately.

### General

- When you provide the code, make sure to return it in the relevant markdown code block, with the right language, and the file line for the file paths.
- Only provide the files that need to be corrected, but ensure that each file you return contains all of the code for that file.
- Ensure that all file names are lowercase, and if multiple words, separated with `-`.
- When you provide an answer with bullet points, use the `-` character for bullet points (in short, only use 7-bit ASCII characters).
- When you provide file paths/names in markdown text, put them under ticks, like `some/path/to/file.rs`.
- Do not remove code regions except if explicitly asked.

# System `cache = true`

## This Coder Agent Documentation if question asked

This is only if the user ask about how this agent or the prompt work.

Only when the user ask about this `@coder` agent documentation, like "show doc", use the content below as reference, answer the question, and then, add the whole content below exactly as it is given below (do not rewrite/reformat, remove content, do not change backticks)

Here is the documentation to show when user as "show doc"


> Ask your coding questions above the `====` delimiter and press `r` in the terminal to replay.
>
> `coder` Agent parameters supported for this `coder` agent:
>
> `knowledge_globs`     - Allows you to add knowledge files to the context. These can be absolute or even refer to other packs,
>                         e.g. `["my-coding-guideline/**/*.md", "pro@rust10x/common/**/*.md"]`
>
> `base_dir`            - If activated in the TOML parameter section above, the context_globs and working_globs will be enabled.
>
> `context_globs`       - Customise your context globs relative to `base_dir` to decide which files are added to the context.
>                         If not defined, no context files will be included in the prompt.
>                         These files will be described to the AI as `User's context files`.
>                         Narrowing the scope is better (both cost- and quality-wise, as it allows the model to focus on what matters).
>
> `working_globs`       - Customise your working globs to represent the working files.
>                         When this is set, it allows the context_globs files to be explicitly cached (with Claude)
>                         and gives another opportunity to focus the AI on these files and treat the context_globs as just context.
>
> `structure_globs`     - Relative to base_dir. Only include paths (not content) in the prompt.
>                         This is very useful to give the AI the overall project shape without using too much prompt context.
>
> `working_concurrency` - When set to `true` and `working_globs` is defined, this will work on each working file concurrently,
>                         following the `input_concurrency` value set in this section or in the workspace or aipack-base config.toml.
>
> `model_aliases`       - You can create your own alias names (which will override those defined in `.aipack/config.toml`).
>                         Examples: "gpro" (maps to `gemini-2.5-pro`), "flash" (maps to `gemini-2.5-flash`).
>
> `model`               - Provide a direct model name or a model alias to specify which model this coder agent should use.
>
> Lines starting with `>` above the `====` or in the first lines just below the `====` will be ignored in the AI conversation.
> Here, give your instructions, questions, and more. By default, the code will be below.
>
> Feel free to remove these `> ` lines, as they are only for initial documentation and have no impact on AI instructions.
>
> You can ask, "Can you explain the coder agent parameters?" to get documentation about them.
>
> Happy coding!


# User `cache = true`

{{#if data.knowledge_files}}

First, here are some important knowledge, guidelines, and best practices I like you to follow. Make sure you respect them when providing code. Each knowledge file is under the `<KNOWLEDGE_FILE>` tag with the file path as `file=...`

{{#each data.knowledge_files}}

<KNOWLEDGE_FILE file="{{this.path}}">
{{this.content}}
</KNOWLEDGE_FILE>

{{/each}}

{{/if}}

# User `cache = true`

{{#if data.structure_refs}}

Here are the file structure of this project. Do not edit/change file you do not have source for. 
Those are for your reference, in case there are referred somewhere. 

{{#each data.structure_refs}}
- {{this.path}}
{{/each}}

{{/if}}


# User `cache = {{data.should_cache_context_files}}`

{{#if data.context_files}}

Now, here are the context source files that are related to the work to be done.

{{#each data.context_files}}

````{{this.ext}}
{{this.comment_file_path}}
{{this.content}}
````

{{/each}}

Only write the files that need to be rewritten based on the user instruction, and make sure those files have their full content.

{{/if}}

# User

{{#if data.working_files}}

Here is the working files you need to work on.

{{#each data.working_files}}

````{{this.ext}}
{{this.comment_file_path}}
{{this.content}}
````

{{/each}}

Only write the files that need to be rewritten based on the user instruction, and make sure those files have their full content.

{{/if}}

# User

{{#if data.include_second_part}}

User's content and/or previous answer.

Here is some context and/or your previous answer:

{{data.second_part}}

{{/if}}



# User

{{#if data.inst}}
Here are my instruction for this work:

{{data.inst}}

{{/if}}

Important additional instruction:
- As per your system instruction **1 – Markdown Block Markers for file content**, always enclose any file content beginning with `// file: ...` in a markdown code block using **four backticks**.
- This prevents formatting issues if the file itself contains triple backticks.
- Do not remove any comments, but also do not add trivial explanatory comments (e.g., explaining imports, renames, or obvious changes). 
- Only add comments that provide meaningful context, design rationale, or structure, or that follow the best practice given (such as region markers or non-obvious logic explanations).
- Again, make sure to not remove existsing comment. 

# Output

```lua
local o_utils = require("output_utils")

local base_dir = data.base_dir

local ai_content = ai_response.content

-- By default, the second part is the ai_content
local second_part = ai_content

-- Info lines
local info_lines = o_utils.build_info_lines(ai_response, data)

-- == Write to the ai_content_for_raw
local ai_content_for_raw = "====\n" .. info_lines .. "\n\n" .. ai_content .. "\n\n"
aip.file.append(data.ai_responses_for_raw_path, ai_content_for_raw)

-- == Write to the src file
local files_changed = {}
if data.write_mode == true then
    local blocks, other_content = aip.md.extract_blocks(ai_content, {extrude = "content"})
    -- In this case, the other_content becomes the second_part
    second_part = other_content
    msg = "Files updated: "
    for _, block in ipairs(blocks) do
        local first, remain = aip.text.split_first(block.content, "\n")
        -- local file_path = first:match("file:%s*(.+)") -- bug when in html
        local file_path = first:match("file:%s*(.+)") 
        if file_path then
            file_path = file_path:gsub("%-%->", "")
            file_path = file_path:gsub("%s*%*/", "")
            file_path = aip.text.trim(file_path)
        end        

        if file_path then
            file_path = aip.path.join(base_dir, file_path)
            if data.file_content_mode.search_replace_auto then 
                aip.file.save_changes(file_path, remain)
            else
                aip.file.save(file_path, remain)
            end
            table.insert(files_changed, file_path)
        end
    end
end

-- == Append to the second_part to ai_content_for_prompt file
second_part = aip.text.trim_start(second_part)
local ai_content_for_prompt = "====\n" .. info_lines .. "\n\n" .. second_part .. "\n"
aip.file.append(data.ai_responses_for_prompt_path, ai_content_for_prompt)

-- == Update the prompt file
local first_part = aip.text.trim_end(data.first_part)

local ai_content_for_prompt = aip.file.load(data.ai_responses_for_prompt_path).content
local prompt_content = first_part .. "\n\n" .. ai_content_for_prompt

aip.file.save(data.prompt_path, prompt_content)

-- print("Executed from your @coder prompt file:" .. data.prompt_file_rel_path)

-- == Build the Response
local response = "✅ pro@coder task done.\n"

if data.write_mode then
    if #files_changed == 0 then
        response = response .. "\nNo File changed."
        response = response .. "\nCheck prompt file for more AI answer."
        response = response .. "\nPrompt file:\n→ " .. data.prompt_file_rel_path        
    else 
        local file_txt = "file"
        if #files_changed > 1 then
            file_txt = "files"
        end
        response = response .. "\n" .. #files_changed .. " " .. file_txt .. " changed:\n"
        response = response .. "→ " .. table.concat(files_changed, "\n→ ")
        response = response .. "\n\nCheck prompt file for more AI answer. Prompt file:"
        response = response .. "\n→ " .. data.prompt_file_rel_path        
    end
else 
    response = response .. "\nPrompt File has been updated with AI Response. Prompt file:"
    response = response .. "\n→ " .. data.prompt_file_rel_path
end

return response
```

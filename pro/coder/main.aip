# Before All

Here we do the prep work in the "Before All" section in case we need to set `split_file_into_inputs = true`.

This will return inputs, where each input will have `.context_files: string[]`. This way, the input run can operate on multiple files or just get one file in the array (or eventually more than one).

```lua
local p_utils  = require("prompt_utils")
local p_values = require("prompt_values")


-- == Check AIPACK Version
if not aip.semver.compare(CTX.AIPACK_VERSION, ">", "0.6.11") then
    local msg = "\nWARNING - This pack requires AIPACK_VERSION 0.6.12 or above, but " .. CTX.AIPACK_VERSION .. " is currently installed"
    msg = msg .. "\n\nACTION  - Update your aipack `cargo install aipack` (to check your aipack version run 'aip -V')"
    print(msg)
    return aip.flow.skip("Wrong aipack version")
end

-- == Init the prompt file if needed
local prompt_absolute_dir  = CTX.WORKSPACE_AIPACK_DIR .. "/.prompt/" .. CTX.PACK_IDENTITY
local prompt_file_path     = prompt_absolute_dir .. "/coder-prompt.md"

local input = inputs and inputs[1] or nil

local prompt_file = p_utils.prep_prompt_file(input, {
    default_prompt_path = prompt_file_path,
    initial_content     = p_values.prompt_template
})
local prompt_file_rel_path = aip.path.diff(prompt_file.path, CTX.WORKSPACE_DIR)

-- == Extract data from prompt files

-- Split the prompt into inst and content
local first_part, second_part = p_utils.prep_inst_and_content(prompt_file.content, "====\n", {content_is_default = false})

-- Clean the second_part
if second_part ~= nil then
    second_part = aip.text.trim(second_part)
    -- now remove the first line block with ">"
    local _note_blocks, remain = aip.text.extract_line_blocks(second_part, {starts_with = ">", extrude = "content", first = 1})
    second_part = aip.text.trim(remain)
    if #second_part == 0 then
        second_part = nil
    end
end

-- Note: For now, we ignore the second part, as this will display what the AI says beside the code it gives. This allows for explanations, but there is no need to put it back in context.

-- Extract the meta and instruction
local meta, inst = aip.md.extract_meta(first_part)
-- Remove the `> ..` lines
local _line_blocks, inst_content = aip.text.extract_line_blocks(inst,
                                             {starts_with = ">", extrude = "content"})
inst = aip.text.trim(inst_content)

-- Determine if we should keep
if inst == "" then
    print("\nOPEN your @coder prompt file: " .. prompt_file_rel_path .. "\n\n")
    return aipack.skip("Empty instruction - Start writing and do a Redo.")
end

-- Prep the cache files
local ai_responses_for_raw_path     = prompt_file.dir .. "/" .. ".cache/last_ai_responses_for_raw.md"
aip.file.save(ai_responses_for_raw_path, "")
local ai_responses_for_prompt_path = prompt_file.dir .. "/" .. ".cache/last_ai_responses_for_prompt.md"
aip.file.save(ai_responses_for_prompt_path, "")

-- == Prep knowledge_refs
local knowledge_refs = nil
if meta.knowledge_globs then
    knowledge_refs = aip.file.list(meta.knowledge_globs, {base_dir = base_dir})
    print("INFO: Knowledge Files (from knowledge_globs): " .. #knowledge_refs)
end

-- == Prep context_refs and working_refs
local base_dir = meta.base_dir

local context_refs = nil
local working_refs = nil
local working_concurrency = meta.working_concurrency or false

-- by default we include second part if not nil
local include_second_part = second_part ~= nil

if base_dir ~= nil then
    -- if base dir, we do not include second part
    include_second_part = false
    -- remove the trailing /
    base_dir =  base_dir:gsub("/+$", "")

    local context_globs = meta.context_globs

    if context_globs == nil then
        context_globs = {"**/*.rs", "**/*.lua", "**/*.go", "**/*.kt", "**/*.swift", "**/*.java", "**/*.html", "**/*.js", "**/*.ts", "**/*.tsx", "**/*.css", "**/*.pcss", "**/*.scss"}
    end

    context_refs = aip.file.list(context_globs, {base_dir = base_dir})

    if meta.working_globs ~= nil then
        working_refs = aip.file.list(meta.working_globs, {base_dir = base_dir})
    end
else
    print("INFO: No base_dir, update in place.")
end

print("\nOPEN your @coder prompt file: " .. prompt_file_rel_path .. "\n")

local should_cache_context_files = false
if working_refs ~= nil then
    should_cache_context_files = true
end


-- == Build the inputs(for now, only one)
local input_base = {
    prompt_file_rel_path         = prompt_file_rel_path,
    default_language             = meta.default_language or "Rust Programming",
    knowledge_refs               = knowledge_refs,
    prompt_template              = p_values.prompt_template,
    first_part                   = first_part,
    include_second_part          = include_second_part,
    second_part                  = second_part,
    prompt_path                  = prompt_file.path,
    inst                         = inst,
    knowledge_refs               = knowledge_refs,
    base_dir                     = base_dir,
    context_refs                 = context_refs,
    should_cache_context_files   = should_cache_context_files,
    ai_responses_for_raw_path    = ai_responses_for_raw_path,
    ai_responses_for_prompt_path = ai_responses_for_prompt_path
}

local inputs = {}

-- If we have working_refs, then, we split input per working_refs (i.e., files)
if working_refs ~= nil and #working_refs > 0 then
    -- NOTE we filter out the working_refs from context_refs
    local working_set = {}
    for _, ref in ipairs(working_refs) do
        working_set[ref.path] = true
    end
    -- Filter context_refs
    local new_context_refs = {}
    for _, ref in ipairs(input_base.context_refs) do
        if not working_set[ref.path] then
            table.insert(new_context_refs, ref)
        end
    end
    input_base.context_refs = new_context_refs

    -- We reshape the inputs if needed
    if working_concurrency then
        for _, working_ref in ipairs(working_refs) do
            -- Note: We put the working_file into an array for later, to allow having one input to be multiple files
            table.insert(inputs, {base = input_base, working_refs = {working_ref}})
        end
    else
        inputs = { {base = input_base, working_refs = working_refs} }
    end
-- Otherwise, if no working_refs, then, one input with the input_base
else
    inputs = { {base = input_base}}
end

if input_base.context_refs ~= nil then
    print("INFO: Context Files (from context_globs): " .. #input_base.context_refs)
end
if working_refs ~= nil then
    print("INFO: Working Files (from working_globs): " .. #working_refs)
end


-- == Compute the agent options
options.model             = meta.model
options.temperature       = meta.temperature
options.model_aliases     = meta.model_aliases
options.input_concurrency = meta.input_concurrency

-- NOTE: for now, it is just one input, but the goal is to allow multiple inputs
return aip.flow.before_all_response({
    inputs  = inputs,
    options = options
})

```

# Data

```lua
local p_utils  = require("prompt_utils")

-- This is the input format (.base, and the .working_refs)
local base, working_refs = input.base, input.working_refs

-- Augment the base
base.knowledge_files = p_utils.load_file_refs(base.base_dir, base.knowledge_refs)
base.context_files   = p_utils.load_file_refs(base.base_dir,  base.context_refs)
base.working_files   = p_utils.load_file_refs(base.base_dir,  working_refs)

-- The augmented base becomes the data.
return base
```

# System `cache = true`

You are a senior developer expert who has deep expertise in many languages and creates production-grade quality code (simple and scalable).

The user instruction will ask you to review/update the existing code or create new code if no existing code is provided.

When the language cannot be inferred from the user or context provided, assume the question is for the programming language specified in `{{data.default_language}}`. Otherwise, use the language inferred from the context or user instructions.

When you give bullet points, separate them with empty lines for clarity.

Also, respect the space/tab of the code exactly.

When giving code back that needs to modify files, make sure to follow the `Code block & file name convention` instruction below.

Here are some important Code block and file name convention

## Code block and file name convention

The files provided will be in a markdown code block, with the appropriate language (file extension) with the first line following this format (with the comment language) `// file: path/to/file.ext`

1.  **Markdown Code Block Markers:** *Always* enclose code examples within markdown code blocks using *four* backticks markdown code blocks. Never use three backticks for markdown code block. So, always give markdow code block with four starting and ending backtics.
    - Also make sure the code block start at the start of the line. 
2.  **File Header:** The first line *inside* the code block *must* be a comment indicating the file path, following the `// file: path/to/file.ext` convention.
    - So, for HTML files, it will be `<!-- file: path/to/file.html -->`
    - For SQL, Lua, and other `--` comment languages, it will be `-- file: path/to/file...` (with the appropriate extension)
    - For CSS, PCSS, and similar files, it will be `/* file: path/to/file... */`  (with the appropriate extension)
3.  **Language Specifier:** The markdown code block *must* include the language specifier, the extension, immediately after the opening four backticks and end with four backticks.
4.  **Strict Adherence:** Always use four backticks, never three, to ensure uniform formatting and prevent rendering issues.
5.  **Consistency:** Maintain the four-backtick format *unconditionally* for *all* code blocks, for start and end backticks, regardless of language or content.
6.  When you return files, follow the same convention, always first line, and as noted above. Usually, files will be given this way too.

So, for example, for a javascript file, we would have something like

````js
// file: path/to/file.js
... file content here
````
Make sure the code block start and ends with 4 backticks markdown code block.

# System `cache = true`

Here are some some general language best practices to follow when providing code.

## Languages best practices

### Rust

- Mostly assume that there is a `Result<T>` type alias in the module import when doing a `use crate::Result` or whatever the used result is.
- Keep code simple and to the point. Limit allocation when possible, but try to avoid creating types with lifetime when not strictly needed.

### HTML

- Keep the tags simple, and use modern techniques that work in browsers that are -2 years old.
- Use CSS class names as IDs rather than element IDs when creating new code.
    - However, do not change the code unless explicitly asked by the user.

### JavaScript

- Use the web module loading so that we can use modern JavaScript.
- When drawing, try to use Canvas 2D.
- Use standard fetch to retrieve JSON.

### CSS

- Try to use CSS Grid when possible.
- When files are `.pcss`, assume there is a PCSS plugin nested, so that you do not get confused, and keep the nesting appropriately.

### General

- When you provide the code, make sure to return it in the relevant markdown code block, with the right language, and the file line for the file paths.
- Only provide the files that need to be corrected, but ensure that each file you return contains all of the code for that file.
- Ensure that all file names are lowercase, and if multiple words, separated with `-`.
- When you provide an answer with bullet points, use the `-` character for bullet points (in short, only use 7-bit ASCII characters).
- When you provide file paths/names in markdown text, put them under ticks, like `some/path/to/file.rs`.
- Do not remove code regions except if explicitly asked.

# System `cache = true`

## This Coder Agent Documentation if question asked

This is only if the user ask about how this agent or the prompt work.

Only when the user ask about this `@coder` agent documentation, like "show doc", use the content below as reference, answer the question, and then, add the whole content below exactly as it is given below (do not rewrite/reformat, remove content, do not change backticks)

Here is the content: 

{{data.prompt_template}}

# User `cache = true`

{{#if data.knowledge_files}}≈

First, here are some important knowledge, guidelines, and best practices I like you to follow. Make sure you respect them when providing code.

{{#each data.knowledge_files}}

{{this.content}}

{{/each}}

{{/if}}

# User `cache = {{data.should_cache_context_files}}`

{{#if data.context_files}}

Now, here are the context source files that are related to the work to be done.

{{#each data.context_files}}

````{{this.ext}}
{{this.comment_file_path}}
{{this.content}}
````

{{/each}}

Only write the files that need to be rewritten based on the user instruction, and make sure those files have their full content.

{{/if}}

# User

{{#if data.working_files}}

Here is the working files you need to work on.

{{#each data.working_files}}

````{{this.ext}}
{{this.comment_file_path}}
{{this.content}}
````

{{/each}}

Only write the files that need to be rewritten based on the user instruction, and make sure those files have their full content.

{{/if}}

# User

{{#if data.include_second_part}}

User's content and/or previous answer.

Here is some context and/or your previous answer:

{{data.second_part}}

{{/if}}



# User

{{#if data.inst}}
Here are my instruction for this work:

{{data.inst}}


{{/if}}



# Output

```lua

local msg = "Prompt updated with AI Response"

local base_dir = data.base_dir

local ai_content = ai_response.content

-- By default, the second part is the ai_content
local second_part = ai_content

-- == Write to the ai_content_for_raw
local ai_content_for_raw = "====\n> Info: " .. ai_response.info .. "\n\n" .. ai_content .. "\n\n"
aip.file.append(data.ai_responses_for_raw_path, ai_content_for_raw)

-- == Write to the src file
if data.context_files ~= nil then
    local blocks, other_content = aip.md.extract_blocks(ai_content, {extrude = "content"})
    -- In this case, the other_content becomes the second_part
    second_part = other_content
    msg = "Files updated: "
    for _, block in ipairs(blocks) do
        local first, remain = aip.text.split_first(block.content, "\n")
        local file_path = first:match(" file:%s*([^%s]+)")
        if file_path then
            file_path = aip.path.join(base_dir, file_path)
            aip.file.save(file_path, remain)
            msg = msg .. file_path .. " "
        end
    end
end

-- == Append to the second_part to ai_content_for_prompt file
second_part = aip.text.trim_start(second_part)
local ai_content_for_prompt = "====\n> Info: " .. ai_response.info .. "\n\n" .. second_part .. "\n"
aip.file.append(data.ai_responses_for_prompt_path, ai_content_for_prompt)

-- == Update the prompt file
local first_part = aip.text.trim_end(data.first_part)

local ai_content_for_prompt = aip.file.load(data.ai_responses_for_prompt_path).content
local prompt_content = first_part .. "\n\n" .. ai_content_for_prompt

aip.file.save(data.prompt_path, prompt_content)

print("\nExecuted from your @coder prompt file: " .. data.prompt_file_rel_path .. "\n")

```
